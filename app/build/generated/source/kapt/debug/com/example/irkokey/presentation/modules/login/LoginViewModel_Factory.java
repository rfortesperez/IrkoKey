// Generated by Dagger (https://dagger.dev).
package com.example.irkokey.presentation.modules.login;

import com.example.irkokey.common.utils.EncryptionUtil;
import com.example.irkokey.data.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<EncryptionUtil> encryptionUtilProvider;

  public LoginViewModel_Factory(Provider<UserRepository> userRepositoryProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.encryptionUtilProvider = encryptionUtilProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(userRepositoryProvider.get(), encryptionUtilProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<UserRepository> userRepositoryProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    return new LoginViewModel_Factory(userRepositoryProvider, encryptionUtilProvider);
  }

  public static LoginViewModel newInstance(UserRepository userRepository,
      EncryptionUtil encryptionUtil) {
    return new LoginViewModel(userRepository, encryptionUtil);
  }
}
