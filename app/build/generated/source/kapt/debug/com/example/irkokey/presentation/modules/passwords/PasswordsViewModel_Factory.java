// Generated by Dagger (https://dagger.dev).
package com.example.irkokey.presentation.modules.passwords;

import android.content.ClipboardManager;
import com.example.irkokey.common.utils.EncryptionUtil;
import com.example.irkokey.data.repository.PasswordRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class PasswordsViewModel_Factory implements Factory<PasswordsViewModel> {
  private final Provider<PasswordRepository> passwordRepositoryProvider;

  private final Provider<ClipboardManager> clipboardManagerProvider;

  private final Provider<EncryptionUtil> encryptionUtilProvider;

  public PasswordsViewModel_Factory(Provider<PasswordRepository> passwordRepositoryProvider,
      Provider<ClipboardManager> clipboardManagerProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    this.passwordRepositoryProvider = passwordRepositoryProvider;
    this.clipboardManagerProvider = clipboardManagerProvider;
    this.encryptionUtilProvider = encryptionUtilProvider;
  }

  @Override
  public PasswordsViewModel get() {
    return newInstance(passwordRepositoryProvider.get(), clipboardManagerProvider.get(), encryptionUtilProvider.get());
  }

  public static PasswordsViewModel_Factory create(
      Provider<PasswordRepository> passwordRepositoryProvider,
      Provider<ClipboardManager> clipboardManagerProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    return new PasswordsViewModel_Factory(passwordRepositoryProvider, clipboardManagerProvider, encryptionUtilProvider);
  }

  public static PasswordsViewModel newInstance(PasswordRepository passwordRepository,
      ClipboardManager clipboardManager, EncryptionUtil encryptionUtil) {
    return new PasswordsViewModel(passwordRepository, clipboardManager, encryptionUtil);
  }
}
