// Generated by Dagger (https://dagger.dev).
package com.example.irkokey.common.di;

import com.example.irkokey.data.dao.PasswordDao;
import com.example.irkokey.data.repository.PasswordRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvidePasswordRepositoryFactory implements Factory<PasswordRepository> {
  private final Provider<PasswordDao> passwordDaoProvider;

  public AppModule_ProvidePasswordRepositoryFactory(Provider<PasswordDao> passwordDaoProvider) {
    this.passwordDaoProvider = passwordDaoProvider;
  }

  @Override
  public PasswordRepository get() {
    return providePasswordRepository(passwordDaoProvider.get());
  }

  public static AppModule_ProvidePasswordRepositoryFactory create(
      Provider<PasswordDao> passwordDaoProvider) {
    return new AppModule_ProvidePasswordRepositoryFactory(passwordDaoProvider);
  }

  public static PasswordRepository providePasswordRepository(PasswordDao passwordDao) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.providePasswordRepository(passwordDao));
  }
}
