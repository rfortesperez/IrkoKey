// Generated by Dagger (https://dagger.dev).
package com.example.irkokey.presentation.modules.backup;

import android.app.Application;
import com.example.irkokey.common.utils.EncryptionUtil;
import com.example.irkokey.data.repository.PasswordRepository;
import com.example.irkokey.data.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class BackupViewModel_Factory implements Factory<BackupViewModel> {
  private final Provider<Application> applicationProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  private final Provider<PasswordRepository> passwordRepositoryProvider;

  private final Provider<EncryptionUtil> encryptionUtilProvider;

  public BackupViewModel_Factory(Provider<Application> applicationProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<PasswordRepository> passwordRepositoryProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    this.applicationProvider = applicationProvider;
    this.userRepositoryProvider = userRepositoryProvider;
    this.passwordRepositoryProvider = passwordRepositoryProvider;
    this.encryptionUtilProvider = encryptionUtilProvider;
  }

  @Override
  public BackupViewModel get() {
    return newInstance(applicationProvider.get(), userRepositoryProvider.get(), passwordRepositoryProvider.get(), encryptionUtilProvider.get());
  }

  public static BackupViewModel_Factory create(Provider<Application> applicationProvider,
      Provider<UserRepository> userRepositoryProvider,
      Provider<PasswordRepository> passwordRepositoryProvider,
      Provider<EncryptionUtil> encryptionUtilProvider) {
    return new BackupViewModel_Factory(applicationProvider, userRepositoryProvider, passwordRepositoryProvider, encryptionUtilProvider);
  }

  public static BackupViewModel newInstance(Application application, UserRepository userRepository,
      PasswordRepository passwordRepository, EncryptionUtil encryptionUtil) {
    return new BackupViewModel(application, userRepository, passwordRepository, encryptionUtil);
  }
}
